
DA5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000284  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007bd  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d9  00000000  00000000  00000b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000319  00000000  00000000  00001256  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039a  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000156  00000000  00000000  00001a02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 11 01 	call	0x222	; 0x222 <main>
  88:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <pwm_init>:

volatile uint16_t adc_result = 0;

void pwm_init(void) {
	// 1) Set PD6, PD2, PD3 to outputs
	PWM_DDR |= (1<<PWM_PIN)|(1<<INA1_PIN)|(1<<INA2_PIN);
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	80 67       	ori	r24, 0x70	; 112
  94:	8a b9       	out	0x0a, r24	; 10

	// 2) Pick a direction (here: INA1=1, INA2=0 ? “forward”)
	PWM_PORT |=  (1<<INA1_PIN);
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	80 61       	ori	r24, 0x10	; 16
  9a:	8b b9       	out	0x0b, r24	; 11
	PWM_PORT &= ~(1<<INA2_PIN);
  9c:	8b b1       	in	r24, 0x0b	; 11
  9e:	8f 7d       	andi	r24, 0xDF	; 223
  a0:	8b b9       	out	0x0b, r24	; 11

	// 3) Timer0 ? Fast?PWM, non-inverting on OC0A
	//    WGM00=1, WGM01=1 ? Fast PWM; COM0A1=1 ? non-invert
	TCCR0A = (1<<WGM00)|(1<<WGM01)|(1<<COM0A1);
  a2:	83 e8       	ldi	r24, 0x83	; 131
  a4:	84 bd       	out	0x24, r24	; 36
	//    CS01=1 ? prescaler = 8
	TCCR0B = (1<<CS01);
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	85 bd       	out	0x25, r24	; 37
  aa:	08 95       	ret

000000ac <uart_init>:
}

void uart_init() {
	UBRR0H = (UBRR_VALUE >> 8);
  ac:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = UBRR_VALUE;
  b0:	87 e6       	ldi	r24, 0x67	; 103
  b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<TXEN0);
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  c2:	08 95       	ret

000000c4 <uart_send>:
}

void uart_send(char c) {
	while (!(UCSR0A & (1<<UDRE0)));
  c4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c8:	95 ff       	sbrs	r25, 5
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <uart_send>
		UDR0 = c;
  cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d0:	08 95       	ret

000000d2 <adc_init>:
}

void adc_init() {
	ADMUX = (1<<REFS0); 
  d2:	80 e4       	ldi	r24, 0x40	; 64
  d4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN)|(1<<ADATE)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); // Enable ADC, Auto Trigger, Interrupt
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	8f ea       	ldi	r24, 0xAF	; 175
  de:	80 83       	st	Z, r24
	ADCSRB = 0x00;
  e0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = (1<<ADC0D); 
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	ADCSRA |= (1<<ADSC); // Start ADC conversion
  ea:	80 81       	ld	r24, Z
  ec:	80 64       	ori	r24, 0x40	; 64
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <timer_init>:
}

void timer_init() {
	TCCR1B |= (1<<WGM12); // CTC Mode
  f2:	e1 e8       	ldi	r30, 0x81	; 129
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 60       	ori	r24, 0x08	; 8
  fa:	80 83       	st	Z, r24
	OCR1A = 12499;	// OCR1A = 2499; // 10ms
  fc:	83 ed       	ldi	r24, 0xD3	; 211
  fe:	90 e3       	ldi	r25, 0x30	; 48
 100:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 104:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |= (1<<CS11)|(1<<CS10); // prescaler 64
 108:	80 81       	ld	r24, Z
 10a:	83 60       	ori	r24, 0x03	; 3
 10c:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A); 
 10e:	ef e6       	ldi	r30, 0x6F	; 111
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	82 60       	ori	r24, 0x02	; 2
 116:	80 83       	st	Z, r24
 118:	08 95       	ret

0000011a <__vector_21>:
}

ISR(ADC_vect) {
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
	adc_result = ADC;
 128:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 12c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 130:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	OCR0A = (uint8_t)(adc_result >> 2);
 138:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 140:	96 95       	lsr	r25
 142:	87 95       	ror	r24
 144:	96 95       	lsr	r25
 146:	87 95       	ror	r24
 148:	87 bd       	out	0x27, r24	; 39
}
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_11>:

ISR(TIMER1_COMPA_vect) {
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
	uint16_t mv = (adc_result * 500) / 1023;  // Convert ADC to  millivolts
 17e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 182:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 186:	84 ef       	ldi	r24, 0xF4	; 244
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	48 9f       	mul	r20, r24
 18c:	90 01       	movw	r18, r0
 18e:	49 9f       	mul	r20, r25
 190:	30 0d       	add	r19, r0
 192:	58 9f       	mul	r21, r24
 194:	30 0d       	add	r19, r0
 196:	11 24       	eor	r1, r1
 198:	c9 01       	movw	r24, r18
 19a:	6f ef       	ldi	r22, 0xFF	; 255
 19c:	73 e0       	ldi	r23, 0x03	; 3
 19e:	0e 94 1d 01 	call	0x23a	; 0x23a <__udivmodhi4>
 1a2:	eb 01       	movw	r28, r22
	
	uart_send((mv / 10) + '0'); // Send whole number part
 1a4:	c9 01       	movw	r24, r18
 1a6:	66 ef       	ldi	r22, 0xF6	; 246
 1a8:	77 e2       	ldi	r23, 0x27	; 39
 1aa:	0e 94 1d 01 	call	0x23a	; 0x23a <__udivmodhi4>
 1ae:	80 e3       	ldi	r24, 0x30	; 48
 1b0:	86 0f       	add	r24, r22
 1b2:	0e 94 62 00 	call	0xc4	; 0xc4 <uart_send>
	uart_send('.');
 1b6:	8e e2       	ldi	r24, 0x2E	; 46
 1b8:	0e 94 62 00 	call	0xc4	; 0xc4 <uart_send>
	uart_send((mv % 10) + '0'); // Send decimal part
 1bc:	9e 01       	movw	r18, r28
 1be:	ad ec       	ldi	r26, 0xCD	; 205
 1c0:	bc ec       	ldi	r27, 0xCC	; 204
 1c2:	0e 94 31 01 	call	0x262	; 0x262 <__umulhisi3>
 1c6:	96 95       	lsr	r25
 1c8:	87 95       	ror	r24
 1ca:	96 95       	lsr	r25
 1cc:	87 95       	ror	r24
 1ce:	96 95       	lsr	r25
 1d0:	87 95       	ror	r24
 1d2:	9c 01       	movw	r18, r24
 1d4:	22 0f       	add	r18, r18
 1d6:	33 1f       	adc	r19, r19
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	82 0f       	add	r24, r18
 1e6:	93 1f       	adc	r25, r19
 1e8:	9e 01       	movw	r18, r28
 1ea:	28 1b       	sub	r18, r24
 1ec:	39 0b       	sbc	r19, r25
 1ee:	c9 01       	movw	r24, r18
 1f0:	80 5d       	subi	r24, 0xD0	; 208
 1f2:	0e 94 62 00 	call	0xc4	; 0xc4 <uart_send>
	uart_send('\n');              
 1f6:	8a e0       	ldi	r24, 0x0A	; 10
 1f8:	0e 94 62 00 	call	0xc4	; 0xc4 <uart_send>
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	bf 91       	pop	r27
 206:	af 91       	pop	r26
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	7f 91       	pop	r23
 20e:	6f 91       	pop	r22
 210:	5f 91       	pop	r21
 212:	4f 91       	pop	r20
 214:	3f 91       	pop	r19
 216:	2f 91       	pop	r18
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <main>:


int main(void) {
	uart_init();
 222:	0e 94 56 00 	call	0xac	; 0xac <uart_init>
	adc_init();
 226:	0e 94 69 00 	call	0xd2	; 0xd2 <adc_init>
	timer_init();
 22a:	0e 94 79 00 	call	0xf2	; 0xf2 <timer_init>
	pwm_init();
 22e:	0e 94 48 00 	call	0x90	; 0x90 <pwm_init>
	
	OCR0A = 128;
 232:	80 e8       	ldi	r24, 0x80	; 128
 234:	87 bd       	out	0x27, r24	; 39
	 
	sei(); // set global interrupt
 236:	78 94       	sei
 238:	ff cf       	rjmp	.-2      	; 0x238 <main+0x16>

0000023a <__udivmodhi4>:
 23a:	aa 1b       	sub	r26, r26
 23c:	bb 1b       	sub	r27, r27
 23e:	51 e1       	ldi	r21, 0x11	; 17
 240:	07 c0       	rjmp	.+14     	; 0x250 <__udivmodhi4_ep>

00000242 <__udivmodhi4_loop>:
 242:	aa 1f       	adc	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	a6 17       	cp	r26, r22
 248:	b7 07       	cpc	r27, r23
 24a:	10 f0       	brcs	.+4      	; 0x250 <__udivmodhi4_ep>
 24c:	a6 1b       	sub	r26, r22
 24e:	b7 0b       	sbc	r27, r23

00000250 <__udivmodhi4_ep>:
 250:	88 1f       	adc	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	5a 95       	dec	r21
 256:	a9 f7       	brne	.-22     	; 0x242 <__udivmodhi4_loop>
 258:	80 95       	com	r24
 25a:	90 95       	com	r25
 25c:	bc 01       	movw	r22, r24
 25e:	cd 01       	movw	r24, r26
 260:	08 95       	ret

00000262 <__umulhisi3>:
 262:	a2 9f       	mul	r26, r18
 264:	b0 01       	movw	r22, r0
 266:	b3 9f       	mul	r27, r19
 268:	c0 01       	movw	r24, r0
 26a:	a3 9f       	mul	r26, r19
 26c:	70 0d       	add	r23, r0
 26e:	81 1d       	adc	r24, r1
 270:	11 24       	eor	r1, r1
 272:	91 1d       	adc	r25, r1
 274:	b2 9f       	mul	r27, r18
 276:	70 0d       	add	r23, r0
 278:	81 1d       	adc	r24, r1
 27a:	11 24       	eor	r1, r1
 27c:	91 1d       	adc	r25, r1
 27e:	08 95       	ret

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
