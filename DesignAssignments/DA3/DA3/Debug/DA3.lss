
DA3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000002be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a1  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000667  00000000  00000000  00000b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000354  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  000014d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a0  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010e  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001a36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 00 01 	call	0x200	; 0x200 <main>
  88:	0c 94 23 01 	jmp	0x246	; 0x246 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Normal_Timer0>:
volatile int PB4_led = 0;

// Timer0 polling
void Normal_Timer0(void)
{
	TCNT0 = 225;             			// start count from 225
  90:	81 ee       	ldi	r24, 0xE1	; 225
  92:	86 bd       	out	0x26, r24	; 38
	TIFR0 |= (1 << TOV0);    			// clear overflow flag
  94:	85 b3       	in	r24, 0x15	; 21
  96:	81 60       	ori	r24, 0x01	; 1
  98:	85 bb       	out	0x15, r24	; 21
	TCCR0B = (1 << CS01) | (1 << CS00); // prescaler 64
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	85 bd       	out	0x25, r24	; 37

	while (!(TIFR0 & (1 << TOV0)))
  9e:	a8 9b       	sbis	0x15, 0	; 21
  a0:	fe cf       	rjmp	.-4      	; 0x9e <Normal_Timer0+0xe>
	{
		// wait
	}
	// stop timer
	TCCR0B = 0x00;
  a2:	15 bc       	out	0x25, r1	; 37
  a4:	08 95       	ret

000000a6 <__vector_11>:
}

// Timer3
ISR(TIMER1_COMPA_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
	t3_count++;
  b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <t3_count>
  bc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <t3_count+0x1>
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <t3_count+0x1>
  c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <t3_count>

	if (t3_count >= 8000)
  ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <t3_count>
  ce:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <t3_count+0x1>
  d2:	80 34       	cpi	r24, 0x40	; 64
  d4:	9f 41       	sbci	r25, 0x1F	; 31
  d6:	fc f0       	brlt	.+62     	; 0x116 <__vector_11+0x70>
	{
		PB4_led = !PB4_led;
  d8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  dc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	23 2b       	or	r18, r19
  e6:	11 f0       	breq	.+4      	; 0xec <__vector_11+0x46>
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (PB4_led)
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fc:	89 2b       	or	r24, r25
  fe:	21 f0       	breq	.+8      	; 0x108 <__vector_11+0x62>
		PORTB |= (1 << PB4);
 100:	85 b1       	in	r24, 0x05	; 5
 102:	80 61       	ori	r24, 0x10	; 16
 104:	85 b9       	out	0x05, r24	; 5
 106:	03 c0       	rjmp	.+6      	; 0x10e <__vector_11+0x68>
		else
		PORTB &= ~(1 << PB4);
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	8f 7e       	andi	r24, 0xEF	; 239
 10c:	85 b9       	out	0x05, r24	; 5
		
		t3_count = 0;
 10e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <t3_count+0x1>
 112:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <t3_count>
	}
}
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <CTC_Timer3>:

void CTC_Timer3(void)
{
	DDRB |= (1 << PB4);  					// PB4 output
 128:	84 b1       	in	r24, 0x04	; 4
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	84 b9       	out	0x04, r24	; 4
	TCCR1B |= (1 << WGM12); 				// CTC mode => WGM12 = 1
 12e:	e1 e8       	ldi	r30, 0x81	; 129
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	88 60       	ori	r24, 0x08	; 8
 136:	80 83       	st	Z, r24
	OCR1A = 61; 							// OCR1A = 61 => ~248us
 138:	8d e3       	ldi	r24, 0x3D	; 61
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 140:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |= (1 << CS11) | (1 << CS10); 	// Prescaler=64 => CS11=1, CS10=1
 144:	80 81       	ld	r24, Z
 146:	83 60       	ori	r24, 0x03	; 3
 148:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); 				// Enable interrupt
 14a:	ef e6       	ldi	r30, 0x6F	; 111
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	82 60       	ori	r24, 0x02	; 2
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

00000156 <__vector_9>:
}

// Timer4 ISR
ISR(TIMER2_OVF_vect)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	2f 93       	push	r18
 162:	3f 93       	push	r19
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
	// Reload for 100us
	TCNT2 = 231;
 168:	87 ee       	ldi	r24, 0xE7	; 231
 16a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>

	t4_count++;
 16e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <t4_count>
 172:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <t4_count+0x1>
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <t4_count+0x1>
 17c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <t4_count>
	if (t4_count >= 10000) // ~1 second
 180:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <t4_count>
 184:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <t4_count+0x1>
 188:	80 31       	cpi	r24, 0x10	; 16
 18a:	97 42       	sbci	r25, 0x27	; 39
 18c:	fc f0       	brlt	.+62     	; 0x1cc <__vector_9+0x76>
	{
		PB3_led = !PB3_led;
 18e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <PB3_led>
 192:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <PB3_led+0x1>
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	23 2b       	or	r18, r19
 19c:	11 f0       	breq	.+4      	; 0x1a2 <__vector_9+0x4c>
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <PB3_led+0x1>
 1a6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PB3_led>
		if (PB3_led)
 1aa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <PB3_led>
 1ae:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <PB3_led+0x1>
 1b2:	89 2b       	or	r24, r25
 1b4:	21 f0       	breq	.+8      	; 0x1be <__vector_9+0x68>
		PORTB |= (1 << PB3);
 1b6:	85 b1       	in	r24, 0x05	; 5
 1b8:	88 60       	ori	r24, 0x08	; 8
 1ba:	85 b9       	out	0x05, r24	; 5
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <__vector_9+0x6e>
		else
		PORTB &= ~(1 << PB3);
 1be:	85 b1       	in	r24, 0x05	; 5
 1c0:	87 7f       	andi	r24, 0xF7	; 247
 1c2:	85 b9       	out	0x05, r24	; 5

		t4_count = 0;
 1c4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <t4_count+0x1>
 1c8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <t4_count>
	}
}
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <Normal_Timer4>:

void Normal_Timer4(void)
{
	DDRB |= (1 << PB3);   // PB3 output
 1de:	84 b1       	in	r24, 0x04	; 4
 1e0:	88 60       	ori	r24, 0x08	; 8
 1e2:	84 b9       	out	0x04, r24	; 4
	TCNT2 = 231;          // preload for 100us
 1e4:	87 ee       	ldi	r24, 0xE7	; 231
 1e6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>

	// Normal mode, prescaler=64 => TCCR2B = 0b100
	TCCR2A = 0x00;
 1ea:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22);
 1ee:	84 e0       	ldi	r24, 0x04	; 4
 1f0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

	// Enable OVF interrupt
	TIMSK2 |= (1 << TOIE2);
 1f4:	e0 e7       	ldi	r30, 0x70	; 112
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	81 60       	ori	r24, 0x01	; 1
 1fc:	80 83       	st	Z, r24
 1fe:	08 95       	ret

00000200 <main>:
}

int main(void)
{
	CTC_Timer3();       // Initialize Timer3
 200:	0e 94 94 00 	call	0x128	; 0x128 <CTC_Timer3>
	Normal_Timer4();    // Initialize Timer4
 204:	0e 94 ef 00 	call	0x1de	; 0x1de <Normal_Timer4>

	// Set PB5 as output for Timer0 toggling
	DDRB |= (1 << PB5);
 208:	84 b1       	in	r24, 0x04	; 4
 20a:	80 62       	ori	r24, 0x20	; 32
 20c:	84 b9       	out	0x04, r24	; 4

	// Enable global interrupts
	sei();
 20e:	78 94       	sei

	// Timer0 poll loop for PB5 => 1.5s on/off
	while (1)
	{
		// PB5 on
		PORTB |= (1 << PB5);
 210:	85 b1       	in	r24, 0x05	; 5
 212:	80 62       	ori	r24, 0x20	; 32
 214:	85 b9       	out	0x05, r24	; 5
		for (uint16_t i = 0; i < 12000; i++)
 216:	c0 e0       	ldi	r28, 0x00	; 0
 218:	d0 e0       	ldi	r29, 0x00	; 0
 21a:	03 c0       	rjmp	.+6      	; 0x222 <main+0x22>
		{
			Normal_Timer0();
 21c:	0e 94 48 00 	call	0x90	; 0x90 <Normal_Timer0>
	// Timer0 poll loop for PB5 => 1.5s on/off
	while (1)
	{
		// PB5 on
		PORTB |= (1 << PB5);
		for (uint16_t i = 0; i < 12000; i++)
 220:	21 96       	adiw	r28, 0x01	; 1
 222:	c0 3e       	cpi	r28, 0xE0	; 224
 224:	8e e2       	ldi	r24, 0x2E	; 46
 226:	d8 07       	cpc	r29, r24
 228:	c8 f3       	brcs	.-14     	; 0x21c <main+0x1c>
		{
			Normal_Timer0();
		}

		// PB5 off
		PORTB &= ~(1 << PB5);
 22a:	85 b1       	in	r24, 0x05	; 5
 22c:	8f 7d       	andi	r24, 0xDF	; 223
 22e:	85 b9       	out	0x05, r24	; 5
		for (uint16_t i = 0; i < 12000; i++)
 230:	c0 e0       	ldi	r28, 0x00	; 0
 232:	d0 e0       	ldi	r29, 0x00	; 0
 234:	03 c0       	rjmp	.+6      	; 0x23c <main+0x3c>
		{
			Normal_Timer0();
 236:	0e 94 48 00 	call	0x90	; 0x90 <Normal_Timer0>
			Normal_Timer0();
		}

		// PB5 off
		PORTB &= ~(1 << PB5);
		for (uint16_t i = 0; i < 12000; i++)
 23a:	21 96       	adiw	r28, 0x01	; 1
 23c:	c0 3e       	cpi	r28, 0xE0	; 224
 23e:	8e e2       	ldi	r24, 0x2E	; 46
 240:	d8 07       	cpc	r29, r24
 242:	c8 f3       	brcs	.-14     	; 0x236 <main+0x36>
 244:	e5 cf       	rjmp	.-54     	; 0x210 <main+0x10>

00000246 <_exit>:
 246:	f8 94       	cli

00000248 <__stop_program>:
 248:	ff cf       	rjmp	.-2      	; 0x248 <__stop_program>
