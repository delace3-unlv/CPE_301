
DA2_3_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000736  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000699  00000000  00000000  0000091e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a3  00000000  00000000  00000fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  0000125c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039b  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  00001657  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000016f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 56 00 	call	0xac	; 0xac <main>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
#include <util/delay.h>


void setup()
{
	DDRB |= (1 << DDB5);      // LED as output
  80:	84 b1       	in	r24, 0x04	; 4
  82:	80 62       	ori	r24, 0x20	; 32
  84:	84 b9       	out	0x04, r24	; 4
	
	DDRD &= ~(1 << DDD2);     // PD2 as input
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	8b 7f       	andi	r24, 0xFB	; 251
  8a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD2);   // Enable internal pull-up
  8c:	8b b1       	in	r24, 0x0b	; 11
  8e:	84 60       	ori	r24, 0x04	; 4
  90:	8b b9       	out	0x0b, r24	; 11

	// INT0 triggers on falling edge 
	EICRA |= (1 << ISC01);
  92:	e9 e6       	ldi	r30, 0x69	; 105
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	80 83       	st	Z, r24
	EICRA &= ~(1 << ISC00);
  9c:	80 81       	ld	r24, Z
  9e:	8e 7f       	andi	r24, 0xFE	; 254
  a0:	80 83       	st	Z, r24

	EIMSK |= (1 << INT0);     // Enable INT0
  a2:	8d b3       	in	r24, 0x1d	; 29
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8d bb       	out	0x1d, r24	; 29
	
	sei();                    // Global interrupt enable
  a8:	78 94       	sei
  aa:	08 95       	ret

000000ac <main>:
}

int main(void)
{
	setup();
  ac:	0e 94 40 00 	call	0x80	; 0x80 <setup>
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <main+0x4>

000000b2 <__vector_1>:
		
	}
}

ISR(INT0_vect)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	2f 93       	push	r18
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
	PORTB |= (1 << PORTB5);   // LED ON
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	8d e3       	ldi	r24, 0x3D	; 61
  cc:	99 e4       	ldi	r25, 0x49	; 73
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <__vector_1+0x1c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_1+0x26>
  d8:	00 00       	nop
	_delay_ms(3000);          // Wait 3 seconds
	PORTB &= ~(1 << PORTB5);  // LED OFF
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	8f 7d       	andi	r24, 0xDF	; 223
  de:	85 b9       	out	0x05, r24	; 5
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
